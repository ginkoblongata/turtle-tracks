
add("NODRAW closes any open turtle graphics window. If no window is open, NODRAW has no effect.");
add("XSIZE returns the current xmax value for the graphics window. X-coordinates range from -XSIZE to XSIZE-1. Therefore, the width of the window is 2*XSIZE.");
add("YSIZE returns the current ymax value for the graphics window. Y-coordinates range from -YSIZE to YSIZE-1. Therefore, the height of the window is 2*YSIZE.");
add("CLEAN fills the entire graphics window with the current background color. The current turtle position and state are not affected.");
add("CLEARSCREEN moves the turtle to the home position, and fills the entire graphics window with the current background color.");
add("WRAP sets the current window border behavior to \"wrap.\" If the turtle moves past an edge of the window, it will \"wrap around\", or reappear on the other side.");
add("WINDOW sets the current window border behavior to \"window.\" If the turtle moves past an edge of the window, it will disappear until it is moved back into view.");
add("FENCE sets the current window border behavior to \"fence.\" Any call that attempts to move the turtle past the edge of the window will throw an error. If the mode was \"window\" and the turtle is already past the edge of the window, FENCE will throw an error.");
add("REFRESHINTERVAL sets the refresh interval in milliseconds. That is, if set to 1000, REFRESHINTERVAL will cause the turtle screen to refresh at most once per second during drawing operations. Setting an interval of 0 causes all drawing to happen immediately. If a negative interval is specified, no drawing will happen automatically, and the REFRESH command should be used to cause the screen to update. The window will, however, always update in response to window manager events, regardless of the setting of REFRESHINTERVAL. If the argument is not an integer, REFRESHINTERVAL throws an error.");
add("REFRESH forces an update of the turtle graphics window. This is typically used in conjunction with a negative REFRESHINTERVAL value, to cause the image to be redisplayed at specific times during the drawing process.");

add("FORWARD moves the turtle forward the given number of pixels in the current heading direction. If the pen is currently down, the turtle will draw a line along its path. If the given input is not a number, FORWARD will throw an error.");
add("BACK moves the turtle the given number of pixels in the direction opposite from the current heading direction. The heading of the turtle is not changed. If the pen is currently down, the turtle will draw a line along its path. If the given input is not a number, BACK will throw an error.");
add("RIGHT changes the turtle's heading by the specified number of degrees to clockwise. The turtle's position is not changed. If the given input is not a number, RIGHT will throw an error.");
add("LEFT changes the turtle's heading by the specified number of degrees to clockwise. The turtle's position is not changed. If the given input is not a number, LEFT will throw an error.");
add("SETX moves the turtle such that its y-position remains the same but its x-position is the given value. The heading of the turtle is not changed. If the pen is currently down, the turtle will draw a line along its path. If the given input is not a number, SETX will throw an error.");
add("SETY moves the turtle such that its x-position remains the same but its y-position is the given value. The heading of the turtle is not changed. If the pen is currently down, the turtle will draw a line along its path. If the given input is not a number, SETY will throw an error.");
add("SETXY moves the turtle such that its x-position and y-position become the given values. The heading of the turtle is not changed. If the pen is currently down, the turtle will draw a line along its path. If the given inputs are not numbers, SETXY will throw an error.");
add("SETPOS moves the turtle to the coordinates specified by the input position list. The input must be a two-element list, the first element being the x-coordinate and the second being the y-coordinate. The heading of the turtle is not changed. If the pen is currently down, the turtle will draw a line along its path. If the given input is not a list or does not contain exactly two numeric elements, SETPOS will throw an error.");
add("SETHEADING sets the heading of the turtle to the given value, in degrees. A heading of 0 points straight up, and positive values run clockwise. The position of the turtle is not changed. If the given input is not a number, SETHEADING will throw an error.");
add("HOME moves the turtle to the origin. It has the same effect as SETXY 0 0. The heading of the turtle is not changed. If the pen is currently down, the turtle will draw a line along its path.");
add("LABEL draws the specified expression on the screen as text, starting from the current turtle position, in the same form as it would appear if it were PRINTed.");

add("XCOR returns the current x-coordinate of the turtle.");
add("YCOR returns the current x-coordinate of the turtle.");
add("POS returns the current position of the turtle in the form of a two-element list, where the first element is the x-coordinate and the second element is the y-coordinate.");
add("HEADING returns the current heading of the turtle, in degrees. A heading of 0 points straight up, and positive values run clockwise.");
add("DISTANCETOXY returns the distance from the current turtle position to the given coordinates. The position and heading of the turtle are not changed. If the given inputs are not numbers, DISTANCETOXY will throw an error.");
add("DISTANCETO returns the distance from the current turtle position to the given coordinates. The input must be a two-element list, the first element being the x-coordinate and the second being the y-coordinate. The position and heading of the turtle are not changed. If the given input is not a list or does not contain exactly two numeric elements, DISTANCETO will throw an error.");
add("TOWARDSXY returns the heading pointing from the turtle position to the given coordinates, in degrees. A heading of 0 points straight up, and positive values run clockwise. The position and heading of the turtle are not changed. If the given inputs are not numbers, TOWARDSXY will throw an error.");
add("TOWARDS returns the heading pointing from the turtle position to the given coordinates, in degrees. The input must be a two-element list, the first element being the x-coordinate and the second being the y-coordinate. A heading of 0 points straight up, and positive values run clockwise. The position and heading of the turtle are not changed. If the given input is not a list or does not contain exactly two numeric elements, TOWARDS will throw an error.");

add("SHOWTURTLE shows the turtle if it is currently hidden. If the turtle is already shown, SHOWTURTLE has no effect.");
add("HIDETURTLE hides the turtle if it is currently shown. If the turtle is already hidden, HIDETURTLE has no effect.");
add("PENDOWN activates the drawing pen. Any subsequent move commands will cause the turtle to draw lines in the current pen color.");
add("PENUP deactivates the drawing pen. The turtle will not perform any drawing during subsequent move commands.");
add("PENERASE sets the drawing pen to erase. Any subsequent move commands will cause the turtle to draw lines in the current background color.");
add("SETPENCOLOR sets the color of the drawing pen. The color may be in the format of a three-element list in which the elements are the RGB values, each between 0 and 255. It may also be a word specifying a color from the palette. If the input is a list with more or less than three elements or elements that are not integers between 0 and 255, or if the input is a word that does not correspond to an entry in the color palette, SETPENCOLOR throws an error.");
add("SETBACKGROUND sets the color of the background, also the color of the eraser. The color may be in the format of a three-element list in which the elements are the RGB values, each between 0 and 255. It may also be a word specifying a color from the palette. If the input is a list with more or less than three elements or elements that are not integers between 0 and 255, or if the input is a word that does not correspond to an entry in the color palette, SETBACKGROUND throws an error.");
add("GETPENCOLOR returns the color of the pen, in the form of a three-element list representing the RGB color. Each value in the list will be an integer between 0 and 255.");
add("GETBACKGROUND returns the color of the background, also the color of the eraser, in the form of a three-element list representing the RGB color. Each value in the list will be an integer between 0 and 255.");
